pipeline {
    agent any

    triggers {
        pollSCM('*/5 * * * *')
    }

    tools {
        gradle 'default'
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()

                git branch: 'main',
                    url: 'https://github.com/ericHumberto/springboot-test-CI'

                sh 'ls -lat'
            }
        }
        stage('Compile') {
            steps {
                sh './gradlew clean --no-daemon'
            }
        }
        stage('Code Analysis') {
                    steps {
                        sh './gradlew sonarqube'
                    }
        }
        stage('SAST') {
            steps {
                sh 'docker run -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/src/horusec horuszup/horusec-cli:latest horusec start -p /src/horusec -P $(pwd) --config-file-path=/src/horusec/horusec-config.json'
            }
        }
        stage('Unit Tests') {
            steps {
                sh './gradlew test'
            }
            post {
                always {
                    junit '**/build/test-results/test/TEST-*.xml'
                }
            }
        }
    // stage('Integration Tests') {
    //     steps {
    //         sh './gradlew integrationTest'
    //     }
    //     post {
    //         always {
    //                     junit '**/build/test-results/integrationTest/TEST-*.xml'
    //         }
    //     }
    // }
    // stage('E2E') {
    // }
    // stage('Security') {
    // }
    // stage('Promotion') {
    //     steps {
    //         timeout(time: 1, unit:'DAYS') {
    //             input 'Deploy to Production?'
    //         }
    //     }
    // }
    // stage('Deploy DEV') {
    //     environment {
    //     }
    //     steps {
    //     }
    // }
    }
    post {
        failure {
            mail to: 'eric.c.humberto@gmail.com', subject: 'Build failed', body: 'Please fix!'
        }
    }
}
